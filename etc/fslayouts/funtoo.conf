# This file defines the mirror filesystem layout used by funtoo.org, and the
# default mirror filesystem layout for Metro.
#
# In Metro lingo, a "mirror" is a location on disk that holds all the stuff
# that Metro needs as well as all the stuff it creates. So this means that this
# file defines the relative paths and filenames of everything that Metro will
# create, and relative paths and filenames of everything that Metro will
# require for its builds. The only thing that we *don't* define here is the
# actual location of our mirror, which is defined in the $[path/mirror]
# variable in /etc/metro/metro.conf. But this file defines how the mirror
# itself is organized.

[section path/mirror]

snapshot: $[]/$[target/build]/snapshots/$[portage/name]-$[target/version].tar.bz2

[when target is snapshot git-snapshot]

# "current" symlink:
link: $[]/$[target/build]/snapshots/$[portage/name]-current.tar.bz2
link/dest: $[portage/name]-$[target/version].tar.bz2

[when target is stage1 stage2 stage3 stage3-quick stage3-freshen emerge]

source: $[]/$[source/build]/$[source/subarch]/$[source/build]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2
target: $[]/$[target/build]/$[target/subarch]/$[target/build]-$[target/subarch]-$[target/version]/$[target/name].tar.bz2

# "current" symlink:
link: $[]/$[target/build]/$[target/subarch]/$[target/name/current].tar.bz2
link/dest: $[target/build]-$[target/subarch]-$[target/version]/$[target/name].tar.bz2

[when target/subarch]

control: $[]/$[target/build]/$[target/subarch]/.control

# OPENVZ

[when target is openvz]

source: $[]/$[source/build]/$[source/subarch]/$[source/build]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2
target: $[]/$[target/build]/$[target/subarch]/$[target/build]-$[target/subarch]-$[target/version]/openvz/$[target/name].tar.gz

# VSERVER

[when target is vserver]

source: $[]/$[source/build]/$[source/subarch]/$[source/build]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2
target: $[]/$[target/build]/$[target/subarch]/$[target/build]-$[target/subarch]-$[target/version]/vserver/$[target/name].tar.bz2

[when target is ami]

source: $[]/$[source/build]/$[source/subarch]/$[source/build]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2
target: $[]/$[target/build]/$[target/subarch]/$[target/build]-$[target/subarch]-$[target/version]/ec2-ami/$[target/name].ami

# SNAPSHOT

[section target when target is snapshot git-snapshot]

name: $[portage/name]-$[target/version]

# EMERGE

[section source when target is ami emerge openvz stage1 stage3-quick stage3-freshen vserver ]

: stage3

# We grab source/version and source/subarch variables from files on disk. Our build.sh
# script updates these files so we are always using the most recent successful stage3
# build for our subarch as the source stage for our stage1.

version: << $[path/mirror/control]/lastdate
subarch: << $[path/mirror/control]/subarch
build: << $[path/mirror/control]/build

# STAGE2

[section source when target is stage2]

: stage1
version: $[target/version]
subarch: $[target/subarch]
build: $[target/build]

# STAGE3

[section source when target is stage3]

: stage2
version: $[target/version]
subarch: $[target/subarch]
build: $[target/build]

# COPY THIS AND CHANGE "emerge" TO YOUR CUSTOM SYMLINK NAME
[section target when target is emerge]

name: $[target/prefix]-$[target/subarch]-$[target/version]

# STAGE3-QUICK, STAGE3-FRESHEN

[section target when target is stage3 stage3-quick stage3-freshen]

name: stage3-$[target/subarch]-$[target/version]
name/current: stage3-$[target/subarch]-current

[section target when target is stage1 stage2]

name: $[target]-$[target/subarch]-$[target/version]
name/current: $[target]-$[target/subarch]-current

[section trigger when target is stage3 stage3-freshen stage3-quick]

ok/run: [
#!/bin/bash

# UPDATE lastdate and subarch for our next build:
echo "$[target/version]" > $[path/mirror/control]/lastdate || exit 1
echo "$[target/subarch]" > $[path/mirror/control]/subarch || exit 2
echo "$[target/build]" > $[path/mirror/control]/build || exit 2
# CREATE current symlink for the stage3
rm -f $[path/mirror/link]
ln -s $[path/mirror/link/dest] $[path/mirror/link] || exit 3
]

[section trigger when target is snapshot git-snapshot]

ok/run: [
#!/bin/bash
# CREATE current symlink for the snapshot
rm -f $[path/mirror/link]
ln -s $[path/mirror/link/dest] $[path/mirror/link] || exit 3
]


