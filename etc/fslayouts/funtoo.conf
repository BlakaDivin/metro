# This file defines the mirror filesystem layout used by funtoo.org, and the
# default mirror filesystem layout for Metro. 
#
# In Metro lingo, a "mirror" is a location on disk that holds all the stuff
# that Metro needs as well as all the stuff it creates. So this means that this
# file defines the relative paths and filenames of everything that Metro will
# create, and relative paths and filenames of everything that Metro will
# require for its builds. The only thing that we *don't* define here is the
# actual location of our mirror, which is defined in the $[path/mirror]
# variable in /etc/metro/metro.conf. But this file defines how the mirror
# itself is organized.

[section build when target/subarch is ~x86 ~i686 ~pentium4 ~core32 ~core64 ~athlon-xp ~amd64 ~core2]

type: funtoo

[section build when target/subarch is x86 i686 pentium4 core32 core64 athlon-xp amd64 core2]

type: gentoo

[section path/mirror]

snapshot: $[]/snapshots/$[portage/name].tar.bz2

[when target/type is stage]

source: $[]/$[source/subarch]/$[local/name]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2 
target: $[]/$[target/subarch]/$[local/name]-$[target/subarch]-$[target/version]/$[target/name].tar.bz2 

# this is used for our "current" symlink - a link to our most recent build that build.sh creates:

stage3/current: $[]/$[target/subarch]/$[target/name/current].tar.bz2

# the destination of the symlink, which should be relative so that it is still valid after being
# mirrored:

stage3/current/dest: $[local/name]-$[target/subarch]-$[target/version]/$[target/name].tar.bz2

[when target/subarch]

control: $[]/$[target/subarch]/.control

# OPENVZ 

[when target/type is openvz]

source: $[]/$[source/subarch]/$[local/name]-$[source/subarch]-$[source/version]/$[source/name].tar.bz2 
target: $[]/openvz/$[target/subarch]/$[target/name].tar.gz

# STAGE 

[section target when target/type is stage]

name: $[target/shortname]-$[target/subarch]-$[target/version]
name/current: $[target/shortname]-$[target/subarch]-current

[section source when target/type is stage]

name: $[source/shortname]-$[source/subarch]-$[source/version]

# SNAPSHOT 

[section target when target/type is snapshot git-snapshot]

name: $[portage/name]

# EMERGE

[section source when targe is gentoo/emerge]

: gentoo/stage3
shortname: stage3

# STAGE1

[section source when target is gentoo/stage1]

: gentoo/stage3
shortname: stage3

# We grab source/version and source/subarch variables from files on disk. Our build.sh
# script updates these files so we are always using the most recent successful stage3
# build for our subarch as the source stage for our stage1.

version: << $[path/mirror/control]/lastdate
subarch: << $[path/mirror/control]/subarch

[section target when target is gentoo/stage1]

# User specifies $[target], don't set it here
shortname: stage1

# STAGE2

[section source when target is gentoo/stage2]

: gentoo/stage1
shortname: stage1
version: $[target/version]
subarch: $[target/subarch]

[section target when target is gentoo/stage2]

# User specifies $[target], don't set it here
shortname: stage2

# STAGE3

[section source when target is gentoo/stage3]

: gentoo/stage2
shortname: stage2
version: $[target/version]
subarch: $[target/subarch]

[section target when target is gentoo/stage3]

# User specifies $[target], don't set it here
shortname: stage3

# STAGE3-QUICK, STAGE3-FRESHEN

[section source when target is gentoo/stage3-quick gentoo/stage3-freshen]

: gentoo/stage3
shortname: stage3
version: << $[path/mirror/control]/lastdate
subarch: << $[path/mirror/control]/subarch

[section target when target is gentoo/stage3-quick gentoo/stage3-freshen]

# User specifies $[target], don't set it here
shortname: stage3
