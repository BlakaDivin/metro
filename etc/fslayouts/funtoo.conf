# This file defines the mirror filesystem layout used by funtoo.org, and the
# default mirror filesystem layout for Metro.
#
# In Metro lingo, a "mirror" is a location on disk that holds all the stuff
# that Metro needs as well as all the stuff it creates. So this means that this
# file defines the relative paths and filenames of everything (relative to
# path/mirror, defined in /etc/metro.conf) that Metro will create, and relative
# paths and filenames of everything that Metro will require for its builds. 

[section path/mirror]

# This is the path where we look for portage tree snapshots, which are tarballs
# that contain the contents of an entire portage tree. In Metro, portage tree
# snapshots may be either a simple tarball of file or a tarball of an active
# git repository. By default, each build has its own snapshot directory, as
# builds can use different portage trees.

snapshot/subpath: $[]/$[target/build]/snapshots

[when target/type is binary-image virtual-image]

# If we are building a binary-image or a virtual-image (stage tarball or
# virtual machine template,) then these subpaths specify the directory
# (relative to $[path/mirror]) where our files are kept.  Virtual images are
# typically stored in a subdirectory of this path, while stage tarballs are
# typically stored immediately within this directory.

source/subpath: $[]/$[source/build]/$[source/subarch]/$[source/build]-$[source/subarch]-$[source/version]
target/subpath: $[]/$[target/build]/$[target/subarch]/$[target/build]-$[target/subarch]-$[target/version]

[when target/subarch]

# This is the location and name of the .control directory. A typical control
# directory might be located at /home/mirror/linux/~funtoo/pentium4/.control.
# This directory contains special files that control the behavior of a 
# subarch's build. Here are the files that are part of the control directory:
# 
# Configured and maintained by user:
#
# ./control/strategy/stage1        contains either "local" or "remote"
#
# If ./control/strategy/stage1 is set to "remote", you will also need to create
# the following files:
#
# ./control/remote/build           contains remote build that contains the stage1 we'll use
# ./control/remote/subarch         contains remote subarch that contains the stage1 we'll use
#
# Initially configured by user, updated automatically by Metro:
#
# ./control/stage1/version         version of most recently-built stage1 for this build/subarch
# ./control/stage3/version         version of most recently-built stage3 for this build/subarch

control: $[]/$[target/build]/$[target/subarch]/.control

# When building a stage2, we have the option of using a /remote/ (ie., not in
# this build/subarch directory) stage1 for our build.  This is typical when we
# are building an optimized set of stages -- if we're building lots of
# optimized stages, it's more efficient to use a single generic stage1 for all
# our builds. When Metro uses a remote stage1, it needs to look in the remote's
# .control directory to figure out the last-built stage1 version to use. This
# variable points Metro to the right place; you should typically not need to
# change this value:

source/control: $[]/$[source/build]/$[source/subarch]/.control

[section strategy]

# Do we want to build a stage1, and utilize this local stage1 for our stage2
# build? This is the question that is answered by the setting of the
# .control/strategy/stage1 file.
#
# If set to "local", this means we build our own local stage1 for this subarch,
# and we utilize this local stage1 for building our stage2.  This is the
# setting you want to use for generic subarches, such as "x86" and "amd64"
# subarches, for example.
#
# If set to "remote", this means that rather than building and utilizing our
# own stage1, we use a /remote/ (ie., not in this build/subarch directory)
# stage1 tarball to generate our stage2.  This is the setting you want to use
# for an optimized build directory, ie. an opteron or pentium4 build. In this
# case, it is more efficient to use an x86 or amd64 stage1 rather than generate
# our own. This can save disk space and compile time. 
#
# Note that you may opt to generate an optimized "local" stage1 tarball in some
# circumstances. This can be handy if you only care about creating an optimized
# opteron build. In this case, you can set the stage1 strategy to "local" and
# your opteron build will generate its own (optimized) stage1. And you won't
# need to worry about creating a generic amd64 build just to so you can feed
# updated amd64 stage1's to your opteron stage2 build.
#
# Creating an optimized stage1 can also come in handy when working with
# experimental portage trees. This is useful for temporarily avoiding build
# failures that may occur due to changing CHOST settings during the stage2
# build process.

stage1: << $[path/mirror/control]/strategy/stage1
