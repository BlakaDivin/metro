[section steps]

prerun: [
#!/bin/bash
rm -f /etc/make.profile
ln -sf ../usr/portage/profiles/$[portage/profile] /etc/make.profile
]

setup: [
/usr/sbin/env-update
gcc-config 1
source /etc/profile
export EMERGE_WARNING_DELAY=0
export CLEAN_DELAY=0
export EBEEP_IGNORE=0
export EPAUSE_IGNORE=0
export CONFIG_PROTECT="-* /etc/locale.gen"
if [ -d /var/tmp/ccache ] 
then
	! [ -e /usr/bin/ccache ] && emerge --oneshot --nodeps ccache
	export CCACHE_DIR=/var/tmp/ccache
	export FEATURES="ccache"

	# The ccache ebuild has a bug where it will install links in /usr/lib/ccache/bin to reflect the current setting of CHOST.
	# But the current setting of CHOST may not reflect the current compiler available (remember, CHOST can be overridden in /etc/make.conf)
	
	# This causes problems with ebuilds (such as ncurses) who may find an "i686-pc-linux-gnu-gcc" symlink in /usr/lib/ccache/bin and 
	# assume that an "i686-pc-linux-gnu-gcc" compiler is actually installed, when we really have an i486-pc-linux-gnu-gcc compiler 
	# installed. For some reason, ncurses ends up looking for the compiler in /usr/bin and it fails - no compiler found.

	# It's a weird problem but the next few ccache-config lines takes care of it by removing bogus ccache symlinks and installing
	# valid ones that reflect the compiler that is actually installed on the system - so if ncurses sees an "i686-pc-linux-gnu-gcc"
	# in /usr/lib/ccache/bin, it looks for (and finds)  a real i686-pc-linux-gnu-gcc installed in /usr/bin.

	# I am including these detailed notes so that people are aware of the issue and so we can look for a more elegant solution to
	# this problem in the future. This problem crops up when you are using an i486-pc-linux-gnu CHOST stage3 to create an 
	# i686-pc-linux-gnu CHOST stage1. It will probably crop up whenever the CHOST gets changed. For now, it's fixed :)

	for x in i386 i486 i586 i686 x86_64
	do
		ccache-config --remove-links $x-pc-linux-gnu
	done
	gccprofile="`gcc-config -c`"
	gccchost=`gcc-config -S $gccprofile | cut -f1 -d" "`
	echo "Setting ccache links to: $gccchost"
	ccache-config --install-links $gccchost
fi
# the quotes below prevent variable expansion of anything inside make.conf
cat > /etc/make.conf << "EOF"
>> files/make.conf
EOF
>> probe/setup
]

chroot/clean: [
#!/bin/bash
# We only do this cleanup if ROOT = / - in other words, if we are going to be packing up /,
# then we need to remove the custom configuration we've done to /. If we are building a 
# stage1, then everything is in /tmp/stage1root so we don't need to do this.

if [ "$[portage/ROOT]" = "/" ]
then
	# remove our tweaked configuration files, restore originals.
	for f in /etc/profile.env /etc/csh.env /etc/env.d/99zzmetro
	do
		echo "Cleaning chroot: $f..."
		rm -f $f || exit 1
	done
	for f in /etc/resolv.conf /etc/hosts
	do
		[ -e $f ] && rm -f $f
		[ -e $f.orig ] && mv -f $f.orig $f || exit 1
	done
else
	# stage1 - make sure we include our make.conf and profile link...
	cp -a /etc/make.conf /etc/make.profile $ROOT/etc || exit 1
fi
# clean up temporary locations. Note that this also ends up removing our scripts, which
# exist in /tmp inside the chroot. So after this cleanup, any execution inside the chroot
# won't work. This is normally okay.

rm -rf /etc/portage /var/tmp/* /tmp/* /root/* /usr/portage /var/log/*
rm -f /var/lib/portage/world
touch /var/lib/portage/world
]

# do any cleanup that you need with things bind mounted here:

chroot/postrun: [
#!/bin/bash
>> steps/setup
if [ "$[target]" != "stage1" ] 
then
	if [ -e /var/tmp/ccache ] 
	then
		emerge -C dev-util/ccache 
	fi
fi
]

unpack: [
#!/bin/bash
[ ! -d $[path/chroot] ] && install -d $[path/chroot] || exit 1
[ ! -d $[path/chroot]/tmp ] && install -d $[path/chroot]/tmp --mode=1777 || exit 1
tar xjpf $[path/mirror/srcstage] -C $[path/chroot] || exit 1
[ ! -d $[path/chroot]/usr/portage ] && install -d $[path/chroot]/usr/portage --mode=0755
tar xjpf $[path/mirror/snapshot] -C $[path/chroot]/usr || exit 1
cat << "EOF" > $[path/chroot]/etc/make.conf
>> files/make.conf
EOF
cat << "EOF" > $[path/chroot]/etc/env.d/99zzmetro
>> files/proxyenv
EOF
cat << "EOF" > $[path/chroot]/etc/locale.gen
>> files/locale.gen
EOF
for f in /etc/resolv.conf /etc/hosts
do
	if [ -e $f ] 
	then
		respath=$[path/chroot]/$f
		[ -e $respath ] && cp $respath ${respath}.orig || echo "couldn't back up $respath" && exit 1
		cp $f $respath || echo "couldn't copy $f into place" && exit 1
	fi
done
]

capture: [
#!/bin/bash
outdir=`dirname $[path/mirror/deststage]`
if [ ! -d $outdir ]
then
	install -d $outdir || exit 1
fi
tar cjpf $[path/mirror/deststage] -C $[path/chroot/stage] .
[ $? -gt 2 ] && exit 1
]
