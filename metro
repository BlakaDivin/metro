#!/usr/bin/python -OO

import os,sys,string,getopt,types
# we need this hard-coded path because we need a module here before we can parse our config file
sharedir="/usr/lib/metro"
sys.path.append(sharedir+"/modules")
import flexdata
import targets
from catalyst_support import *

__app__=os.path.basename(sys.argv[0])
__maintainer__="Daniel Robbins <drobbins@funtoo.org>"

__license__=""" Distributed under the terms of the GNU General Public License version 2
 Metro comes with ABSOLUTELY NO WARRANTY; This is free software, and you are welcome to
 redistribute it under certain conditions. See /usr/lib/metro/LICENSE for details.
"""
__status__="Development"
__version__="iteration 1 version 0.5 (1.0.5)"


def usage():
	version()
	print """ metro [OPTION]... [FILE]...

 -h, --help			Print this message
 -V, --version			Display version information
 
 -d, --debug			Enable debug mode
 -v, --verbose			Verbose mode
 -l, --lax			Lax variable expansion
 
 -k [key], --key [key]		Print value of [key], ie. "distfiles"
 -e [string], --eval [string]	Evaluate string, ie. '$[distfiles]' (remember to use single-quotes)

 [FILE]				File(s) to parse and evaluate
"""

def version():
	print " "+__app__,"-",__version__
	print
	print " Copyright 2008-2009 Funtoo Technologies, LLC; Portions copyright 2003-2007 Gentoo Foundation"
	print " Maintainer:",__maintainer__
	print
	print " Web: http://www.funtoo.org"
	print " Project: http://github.com/funtoo/metro/wikis"
	print
	print __license__

def find_target(settings):
	""" 
	
	Use the "target/class" setting in our metadata to initialize the proper class defined in the modules/targets.py module.
	
	The targets.__dict__ dictionary contains all the objects in the targets module. We look inside it to see if the class
	defined in "target/class" exists in there and is a class. If not, we raise an exception.
	
	"""
	if not targets.__dict__.has_key(settings["target/class"]):
		raise MetroError, "Metro class "+settings["target/class"]+" not defined in modules/targets.py."
	if type(targets.__dict__[settings["target/class"]]) != types.ClassType:
		raise MetroError, "Metro class "+settings["target/class"]+" does not appear to be a class."
	return targets.__dict__[settings["target/class"]](settings)

	
def main():
	if os.getuid() != 0:
		print __app__ + ": This script requires root privileges to operate."
		sys.exit(2)

	# we need some options in order to work correctly
	if len(sys.argv) < 2:
		usage()
		sys.exit(2)

	# parse out the command line arguments
	try:
		opts,args = getopt.getopt(sys.argv[1:], "ldhvxVk:e:", ["lax","debug","help", "verbose", "version","key=","eval="])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	
	# defaults for commandline opts
	debug=False
	verbose=False
	myopts=[]
	strict=True

	# check preconditions

	valueme=None
	evalme=None
	optdict={}
	for opt,optarg in opts:
		optdict[opt]=optarg

	# Step 1: check for "special" help/version options, handle them and exit:

	if optdict.has_key("-h") or optdict.has_key("--help"):
		usage()
		sys.exit(1)
	elif optdict.has_key("-V") or optdict.has_key("--version"):
		version()
		sys.exit(1)

	# Step 2: parse optional arguments that affect behavior of the program

	if optdict.has_key("-l") or optdict.has_key("--lax"):
		strict=False
	if optdict.has_key("-d") or optdict.has_key("--debug"):
		debug=True
	if optdict.has_key("-v") or optdict.has_key("--verbose"):
		verbose=True

	# Step 3: check for duplicate main options, which is an error

	mainargs=0
	for x in [ "-k", "--key", "-e", "--eval" ]:
		if optdict.has_key(x):
			mainargs += 1
	if mainargs > 1:
		print "Please specify only one -k, --key, -e or --eval option at a time."
		sys.exit(1)

	# Step 4: parse main options

	if optdict.has_key("-k") or optdict.has_key("--key"):
		if optdict.has_key("-k"):
			valueme=optdict["-k"]
		else:
			valueme=optdict["--key"]
	if optdict.has_key("-e") or optdict.has_key("--eval"):
		if optdict.has_key("-e"):
			evalme=optdict["-e"]
		else:
			evalme=optdict["--eval"]

	settings=flexdata.collection()

	if os.path.exists("/etc/metro/metro.conf"):
		settings.collect("/etc/metro/metro.conf")
	else:
		print "Warning: /etc/metro/metro.conf not found."
	
	# parse command-line supplied configuration files and spec files in the order they were specified

	apos = 0

	while apos < len(args):
		if args[apos][-1] == ":":
		# args such as: target/version: 2008.10.12 - parse both of these args
			if apos+1 >= len(args):
				raise MetroError, "Missing value argument for %s" % args[apos]
			settings[args[apos][:-1]] = args[apos+1]
			apos += 2
		else:
			settings.collector.append(args[apos])
			apos += 1
	
	settings.runCollector()
	
	if valueme:
		if type(settings[valueme]) == types.ListType:
			for line in settings[valueme]:
				print line
		else:
			print settings[valueme]
		sys.exit(0)
	elif evalme:
		print settings.expandString(string=evalme)
		sys.exit(0)
	if not settings.has_key("target"):
		raise MetroError("Please specify a target.")
	
	target = find_target(settings)

	# "target" is now a new object, constructor has run. We have validated that we have all required values.
	
	# However - we could still have some bad data -
	# since settings should now be all defined, now we can go through all the settings now and make sure we don't have any bad
	# references in our spec data, like foo: $[bar] and not having bar defined. If we find problems, checkconfig() will alert
	# the user and abort:

	#target.checkconfig(strict)
	
	# OK, we have all required values - our config is good - now we can run the target
	print __app__+": running target \""+settings["target"]+"\"."
	target.run()

	# Now that the target has run, we want to clean up our temporary work space. cleanup() does this.
	# TODO: ADD SOMETHING HERE TO CLEAN UP ALL PATHS WE'VE USED...
	#target.cleanPath()

	# We're all done.

	print __app__+": complete."
	if debug:	
		settings.debugdump()
		
try:		
	main()
except (MetroError,KeyError),arg:
	print "metro:",arg
	sys.exit(1)
except flexdata.FlexDataError:
	sys.exit(1)
except KeyboardInterrupt:
	print "\n" + __app__ +" build aborted due to user interrupt (ctrl-C)"
	print
	print __app__,"aborting..."
	raise
	sys.exit(2)
