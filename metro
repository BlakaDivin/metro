#!/usr/bin/python -OO

import os,sys,string,getopt

__app__=os.path.basename(sys.argv[0])
__author__="Daniel Robbins <drobbins@funtoo.org>"
__maintainer__="Daniel Robbins <drobbins@funtoo.org>"
__copyright__="Copyright 2008 Funtoo Technologies, LLC; Copyright 2003-2007 Gentoo Foundation"

__license__="GPL-2 - Distributed under the GNU General Public License version 2"
__status__="Development"
__version__="0.5"

# we need to define this here because we need to add a module to our path so we can load the config file in /etc
sharedir="/usr/lib/catalyst"

def usage():
	print "Usage:",__app__,"[options] specfile1 [specfile2...]"
	print " -d --debug		enable debugging"
	print " -h --help		print this help message"
	print " -V --version		display version information"
	print " -v --verbose		verbose output"
	print
	print "Usage examples:"
	print
	print "Using the specfile option (-f, --file) to build a stage target:"
	print __app__,"stage1-specfile.spec"

def version():
	print __app__,__version__
	print "Author:",__author__
	print __copyright__

def parse_config(myconfig):
	for opt in [ "ccache" ]:
		if opt in string.split(settings["options"]):
			print opt,"support enabled."
			settings[opt.upper()]="1"

def find_target(settings):
	""" 
	
	Use the "metro/class" setting in our metadata to initialize the proper class defined in the modules/targets.py module.
	
	The targets.__dict__ dictionary contains all the objects in the targets module. We look inside it to see if the class
	defined in "metro/class" exists in there and is a class. If not, we raise an exception.
	
	"""
	if not targets.__dict__.has_key(settings["metro/class"]):
		raise CatalystError, "Metro class "+settings["metro/class"]+" not defined in modules/targets.py."
	if type(targets.__dict__[settings["metro/class"]]) != types.ClassType:
		raise CatalystError, "Metro class "+settings["metro/class"]+" does not appear to be a class."
	return targets.__dict__[settings["metro/class"]](settings)

if __name__ == "__main__":
	version()
	if os.getuid() != 0:
		# catalyst cannot be run as a normal user due to chroots, mounts, etc
		print "!!! catalyst: This script requires root privileges to operate"
		sys.exit(2)

	# we need some options in order to work correctly
	if len(sys.argv) < 2:
		usage()
		sys.exit(2)

	# parse out the command line arguments
	try:
		opts,args = getopt.getopt(sys.argv[1:], "ldhvVe", ["lax","debug","help", "verbose", "version","expand"])
	except getopt.GetoptError:
		usage()
		sys.exit(2)
	
	# defaults for commandline opts
	debug=False
	verbose=False
	myopts=[]
	strict=True
	replace=False

	# check preconditions
	if len(args) == 0:
		print "!!! catalyst: please specify at least one file to read\n"
		usage()
		sys.exit(2)

	expandme=None
	for opt,optarg in opts:
		if opt in ("-e","--expand"):
			expandme=optarg
		elif opt in ("-l","--lax"):
			strict=False		
		elif opt in ("-h","--help"):
			usage()
			sys.exit(1)
		elif opt in ("-V", "--version"):
			version()
			sys.exit(1)
		elif opt == "--replace":
			print "Warning: --replace option specified - any existing output stage will be replaced..."
			replace=True
		elif opt in ("-d", "--debug"):
			debug=True
			print "DEBUG: opts",opts
			print "DEBUG: args",args
		elif opt in ("-v","--verbose"):
			verbose=True

	# import configuration file and import our main module using those settings
	sys.path.append(sharedir+"/modules")
	from catalyst_support import *
	import flexdata
	import targets

	settings=flexdata.collection()
	settings["catalyst_version"]=__version__
	settings["sharedir"]=sharedir

	host=os.uname()[4]
	if host == "x86_64":
		settings["hostarch"] = "amd64"
	elif host in [ "i386", "i486", "i586", "i686" ]:
		settings["hostarch"] = "x86"

	if os.path.exists("/etc/catalyst/global.spec"):
		print "Reading in configuration from /etc/catalyst/global.spec..."
		settings.collect("/etc/catalyst/global.spec")
	else:
		print "Warning: /etc/catalyst/global.spec not found."
	
	if replace:	
		if settings.has_key("options"):
			settings["options"] = settings["options"] + " replace"
		else:
			settings["options"] = "replace"

	# the new version of catalyst does not have any configuration file
	# parse command-line supplied configuration files and spec files in the order they were specified

	for arg in args:
		settings.collect(arg)
	if expandme:
		print settings[expandme]
		sys.exit(0)
	if not settings.has_key("target"):
		raise CatalystError("Please specify a target.")
	
	try:
		target = find_target(settings)

		# "target" is now a new object, constructor has run. We have validated that we have all required values.
		
		# However - we could still have some bad data -
		# since settings should now be all defined, now we can go through all the settings now and make sure we don't have any bad
		# references in our spec data, like foo: $[bar] and not having bar defined. If we find problems, checkconfig() will alert
		# the user and abort:

		target.checkconfig(strict)
		
		# OK, we have all required values - our config is good - now we can run the target

		print "Running target \""+settings["target"]+"\"."
		target.run()

		# Now that the target has run, we want to clean up our temporary work space. cleanup() does this.

		target.cleanup()

		# We're all done.

		print "Catalyst complete."
		print
	except CatalystError:
		print "ERROR - exiting."
		sys.exit(1)
	except KeyboardInterrupt:
		print "\nCatalyst build aborted due to user interrupt ( Ctrl-C )"
		print
		print "Catalyst aborting...."
		sys.exit(2)
